package vm

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *StorageInterface) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "byte":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ByteStorage")
				return
			}
			if z.ByteStorage == nil {
				z.ByteStorage = make(map[string][]byte, zb0002)
			} else if len(z.ByteStorage) > 0 {
				for key := range z.ByteStorage {
					delete(z.ByteStorage, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 []byte
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ByteStorage")
					return
				}
				za0002, err = dc.ReadBytes(za0002)
				if err != nil {
					err = msgp.WrapError(err, "ByteStorage", za0001)
					return
				}
				z.ByteStorage[za0001] = za0002
			}
		case "int":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Int64Storage")
				return
			}
			if z.Int64Storage == nil {
				z.Int64Storage = make(map[string][]int64, zb0003)
			} else if len(z.Int64Storage) > 0 {
				for key := range z.Int64Storage {
					delete(z.Int64Storage, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0003 string
				var za0004 []int64
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Int64Storage")
					return
				}
				var zb0004 uint32
				zb0004, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "Int64Storage", za0003)
					return
				}
				if cap(za0004) >= int(zb0004) {
					za0004 = (za0004)[:zb0004]
				} else {
					za0004 = make([]int64, zb0004)
				}
				for za0005 := range za0004 {
					za0004[za0005], err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "Int64Storage", za0003, za0005)
						return
					}
				}
				z.Int64Storage[za0003] = za0004
			}
		case "string":
			var zb0005 uint32
			zb0005, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "StringStorage")
				return
			}
			if z.StringStorage == nil {
				z.StringStorage = make(map[string]string, zb0005)
			} else if len(z.StringStorage) > 0 {
				for key := range z.StringStorage {
					delete(z.StringStorage, key)
				}
			}
			for zb0005 > 0 {
				zb0005--
				var za0006 string
				var za0007 string
				za0006, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "StringStorage")
					return
				}
				za0007, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "StringStorage", za0006)
					return
				}
				z.StringStorage[za0006] = za0007
			}
		case "float":
			var zb0006 uint32
			zb0006, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Float64Storage")
				return
			}
			if z.Float64Storage == nil {
				z.Float64Storage = make(map[string]float64, zb0006)
			} else if len(z.Float64Storage) > 0 {
				for key := range z.Float64Storage {
					delete(z.Float64Storage, key)
				}
			}
			for zb0006 > 0 {
				zb0006--
				var za0008 string
				var za0009 float64
				za0008, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Float64Storage")
					return
				}
				za0009, err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "Float64Storage", za0008)
					return
				}
				z.Float64Storage[za0008] = za0009
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StorageInterface) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "byte"
	err = en.Append(0x84, 0xa4, 0x62, 0x79, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.ByteStorage)))
	if err != nil {
		err = msgp.WrapError(err, "ByteStorage")
		return
	}
	for za0001, za0002 := range z.ByteStorage {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "ByteStorage")
			return
		}
		err = en.WriteBytes(za0002)
		if err != nil {
			err = msgp.WrapError(err, "ByteStorage", za0001)
			return
		}
	}
	// write "int"
	err = en.Append(0xa3, 0x69, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Int64Storage)))
	if err != nil {
		err = msgp.WrapError(err, "Int64Storage")
		return
	}
	for za0003, za0004 := range z.Int64Storage {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "Int64Storage")
			return
		}
		err = en.WriteArrayHeader(uint32(len(za0004)))
		if err != nil {
			err = msgp.WrapError(err, "Int64Storage", za0003)
			return
		}
		for za0005 := range za0004 {
			err = en.WriteInt64(za0004[za0005])
			if err != nil {
				err = msgp.WrapError(err, "Int64Storage", za0003, za0005)
				return
			}
		}
	}
	// write "string"
	err = en.Append(0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.StringStorage)))
	if err != nil {
		err = msgp.WrapError(err, "StringStorage")
		return
	}
	for za0006, za0007 := range z.StringStorage {
		err = en.WriteString(za0006)
		if err != nil {
			err = msgp.WrapError(err, "StringStorage")
			return
		}
		err = en.WriteString(za0007)
		if err != nil {
			err = msgp.WrapError(err, "StringStorage", za0006)
			return
		}
	}
	// write "float"
	err = en.Append(0xa5, 0x66, 0x6c, 0x6f, 0x61, 0x74)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Float64Storage)))
	if err != nil {
		err = msgp.WrapError(err, "Float64Storage")
		return
	}
	for za0008, za0009 := range z.Float64Storage {
		err = en.WriteString(za0008)
		if err != nil {
			err = msgp.WrapError(err, "Float64Storage")
			return
		}
		err = en.WriteFloat64(za0009)
		if err != nil {
			err = msgp.WrapError(err, "Float64Storage", za0008)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StorageInterface) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "byte"
	o = append(o, 0x84, 0xa4, 0x62, 0x79, 0x74, 0x65)
	o = msgp.AppendMapHeader(o, uint32(len(z.ByteStorage)))
	for za0001, za0002 := range z.ByteStorage {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendBytes(o, za0002)
	}
	// string "int"
	o = append(o, 0xa3, 0x69, 0x6e, 0x74)
	o = msgp.AppendMapHeader(o, uint32(len(z.Int64Storage)))
	for za0003, za0004 := range z.Int64Storage {
		o = msgp.AppendString(o, za0003)
		o = msgp.AppendArrayHeader(o, uint32(len(za0004)))
		for za0005 := range za0004 {
			o = msgp.AppendInt64(o, za0004[za0005])
		}
	}
	// string "string"
	o = append(o, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67)
	o = msgp.AppendMapHeader(o, uint32(len(z.StringStorage)))
	for za0006, za0007 := range z.StringStorage {
		o = msgp.AppendString(o, za0006)
		o = msgp.AppendString(o, za0007)
	}
	// string "float"
	o = append(o, 0xa5, 0x66, 0x6c, 0x6f, 0x61, 0x74)
	o = msgp.AppendMapHeader(o, uint32(len(z.Float64Storage)))
	for za0008, za0009 := range z.Float64Storage {
		o = msgp.AppendString(o, za0008)
		o = msgp.AppendFloat64(o, za0009)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StorageInterface) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "byte":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ByteStorage")
				return
			}
			if z.ByteStorage == nil {
				z.ByteStorage = make(map[string][]byte, zb0002)
			} else if len(z.ByteStorage) > 0 {
				for key := range z.ByteStorage {
					delete(z.ByteStorage, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 []byte
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ByteStorage")
					return
				}
				za0002, bts, err = msgp.ReadBytesBytes(bts, za0002)
				if err != nil {
					err = msgp.WrapError(err, "ByteStorage", za0001)
					return
				}
				z.ByteStorage[za0001] = za0002
			}
		case "int":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Int64Storage")
				return
			}
			if z.Int64Storage == nil {
				z.Int64Storage = make(map[string][]int64, zb0003)
			} else if len(z.Int64Storage) > 0 {
				for key := range z.Int64Storage {
					delete(z.Int64Storage, key)
				}
			}
			for zb0003 > 0 {
				var za0003 string
				var za0004 []int64
				zb0003--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Int64Storage")
					return
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Int64Storage", za0003)
					return
				}
				if cap(za0004) >= int(zb0004) {
					za0004 = (za0004)[:zb0004]
				} else {
					za0004 = make([]int64, zb0004)
				}
				for za0005 := range za0004 {
					za0004[za0005], bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Int64Storage", za0003, za0005)
						return
					}
				}
				z.Int64Storage[za0003] = za0004
			}
		case "string":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StringStorage")
				return
			}
			if z.StringStorage == nil {
				z.StringStorage = make(map[string]string, zb0005)
			} else if len(z.StringStorage) > 0 {
				for key := range z.StringStorage {
					delete(z.StringStorage, key)
				}
			}
			for zb0005 > 0 {
				var za0006 string
				var za0007 string
				zb0005--
				za0006, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "StringStorage")
					return
				}
				za0007, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "StringStorage", za0006)
					return
				}
				z.StringStorage[za0006] = za0007
			}
		case "float":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Float64Storage")
				return
			}
			if z.Float64Storage == nil {
				z.Float64Storage = make(map[string]float64, zb0006)
			} else if len(z.Float64Storage) > 0 {
				for key := range z.Float64Storage {
					delete(z.Float64Storage, key)
				}
			}
			for zb0006 > 0 {
				var za0008 string
				var za0009 float64
				zb0006--
				za0008, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Float64Storage")
					return
				}
				za0009, bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Float64Storage", za0008)
					return
				}
				z.Float64Storage[za0008] = za0009
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StorageInterface) Msgsize() (s int) {
	s = 1 + 5 + msgp.MapHeaderSize
	if z.ByteStorage != nil {
		for za0001, za0002 := range z.ByteStorage {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.BytesPrefixSize + len(za0002)
		}
	}
	s += 4 + msgp.MapHeaderSize
	if z.Int64Storage != nil {
		for za0003, za0004 := range z.Int64Storage {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.ArrayHeaderSize + (len(za0004) * (msgp.Int64Size))
		}
	}
	s += 7 + msgp.MapHeaderSize
	if z.StringStorage != nil {
		for za0006, za0007 := range z.StringStorage {
			_ = za0007
			s += msgp.StringPrefixSize + len(za0006) + msgp.StringPrefixSize + len(za0007)
		}
	}
	s += 6 + msgp.MapHeaderSize
	if z.Float64Storage != nil {
		for za0008, za0009 := range z.Float64Storage {
			_ = za0009
			s += msgp.StringPrefixSize + len(za0008) + msgp.Float64Size
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *VirtualMachine) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z VirtualMachine) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 0
	err = en.Append(0x80)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z VirtualMachine) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 0
	o = append(o, 0x80)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *VirtualMachine) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z VirtualMachine) Msgsize() (s int) {
	s = 1
	return
}
